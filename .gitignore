class GameBoard:
    def __init__(self, size):
        self.size = size
        self.num_entries = [0] * size
        self.items = [[0] * size for i in range(size)]
        self.points = [0] * 2
       
    def column_resulting_in_max_points(self, player):
        max_points = 0
        slot_number_for_max_points = 0
        for col in self.free_slots_as_close_to_middle_as_possible(): # col
            #put player in
            self.items[col][self.num_entries[col]] = player
            # check the point
            point = self.num_new_points(col, self.num_entries[col], player)
            if point > max_points:
                max_points = point
                slot_number_for_max_points = col
                self.items[col][self.num_entries[col]] = 0
            else:
                self.items[col][self.num_entries[col]] = 0 # clear char
        if max_points == 0:
            slot_number_for_max_points = GameBoard.free_slots_as_close_to_middle_as_possible(self)[0]
            return (slot_number_for_max_points, 0)
        else:
            return (slot_number_for_max_points, max_points)

    def add(self, column, player):
        for row in range(self.size):
           if len(self.num_entries) > self.size or (column < 0 or column >= self.size):
               return False
           else:
               if player == 1:
                   if self.items[column][row] == 0:
                      self.items[column][row] = 1
                      self.num_entries[column] +=1
                      self.points[0] += self.num_new_points(column, row, 1)
                   else:
                        continue
               elif player == 2:
                   if self.items[column][row] == 0:
                        self.items[column][row] = 2
                        self.num_entries[column] +=1
                        self.points[1] += self.num_new_points(column, row, 2)
                   else:
                        continue
                     
           return True
           
    def num_new_points(self, column, row, player):
        return self.vertical1(column,row,player) + self.horizontal1(column,row,player) + self.diagonal_positive(column,row,player) + self.diagonal_negative(column,row,player)
               
    def vertical1(self,column,row,player):
        count = 0
        if row >= 3:
            if (self.items[column][row] == player and self.items[column][row-1] == player and self.items[column][row-2] == player and self.items[column][row-3] == player) and (self.items[column][row] != 0):
                count += 1
                return count
            else:
                return count
        else:
            if (self.items[column][row] == player and self.items[column][row+1] == player and self.items[column][row+2] == player and self.items[column][row+3] == player) and (self.items[column][row] != 0):
                count += 1
                return count
            else:
                return count
                   
    def horizontal1(self,column,row,player):
        count = 0
        count1 = 0
        for i in range(1,4):
            try:
                if self.items[column-i][row] == player and column - i >= 0:
                    count += 1
                else:
                    break
            except IndexError:
                break
        for i in range(0,4):
            try:
                if self.items[column+i][row] == player:
                    count1 += 1
                else:
                    break
            except IndexError:
                break
        if count + count1 >= 4:
            return count + count1 - 4 + 1
        else:
            return 0
           
    def diagonal_positive(self,column,row,player): # positive
        count = 0
        count1 = 0
        for i in range(1,4):
            try: # if out of self.size
                if self.items[column-i][row-i] == player and column - i >= 0 and row - i >= 0:
                    count += 1
                else:
                    break
            except IndexError:
                break
        for i in range(0,4):
            try:
                if self.items[column+i][row+i] == player:
                    count1 += 1
                else:
                    break
            except IndexError:
                break
        if count + count1 >= 4:
            return count + count1 - 4 + 1
        else:
            return 0
                       
    def diagonal_negative(self,column,row,player): # negative
        count = 0
        count1 = 0
        for i in range(1,4):
            try: # if out of self.size
                if self.items[column-i][row+i] == player and column - i >= 0:
                    count += 1
                else:
                    break
            except IndexError:
                break
        for i in range(0,4):
            try:
                if self.items[column+i][row-i] == player and row - i >= 0:
                    count1 += 1
                else:
                    break
            except IndexError:
                break
        if count + count1 >= 4:
            return count + count1 - 4 + 1
        else:
            return 0
       
    def num_free_positions_in_column(self, column):
        count = 0
        for row in range(self.size-1,-1,-1):
            if self.items[column][row] == 0:
                count += 1
        return count
       
    def game_over(self):
        for index in range(self.size):
            if self.items[index][self.size-1] == 0:
                return False
        return True
           
    def free_slots_as_close_to_middle_as_possible(self):
        middle = self.size // 2
        free_slots = []
        if self.size % 2 == 0:
            for i in range(middle-1,-1,-1):
                free_slots.append(i)
            for n in range(1,self.size,2):
                free_slots.insert(n,middle)
                middle+=1
               
            for i in range(self.size):
                if GameBoard.num_free_positions_in_column(self, i) == 0:
                    free_slots.remove(i)
            return free_slots
        else:
            for i in range(middle+1):
                free_slots.append(middle)
                middle += 1
           
            middle = self.size // 2
            for j in range(1,self.size - 1,2):
                free_slots.insert(j,middle-1)
                middle -= 1
           
            for i in range(self.size):
                if GameBoard.num_free_positions_in_column(self, i) == 0:
                    free_slots.remove(i)
           
            return free_slots
        
    def display(self):
        for row in range(self.size-1,-1,-1):
            for column in range(0,self.size):
               if self.items[column][row] == 1:
                   print("o",end=" ")
               elif self.items[column][row] == 2:
                   print("x",end=" ")
               elif self.items[column][row] == 0:
                   print(" ",end=" ")
            print()
        print("-" * (2 * self.size - 1),end="")
        print()
        for num in range(self.size):
            print(num,end=" ")
        print()
        print("Points player 1: " + str(self.points[0]))
        print("Points player 2: " + str(self.points[1]))


    def summary(self,player):
        horizontal = []
        vertical = []
        diagonal_positive = []
        diagonal_negative = []
        if self.game_over() == True:
            for column in range(self.size):
                for row in range(self.size):
                    try:
                        if self.items[column][row] == player and self.items[column+1][row] == player and self.items[column+2][row] == player and self.items[column+3][row] == player:
                            horizontal.append([(column,row),(column+1,row),(column+2,row),(column+3,row)])
                        else:
                            continue
                    except IndexError:
                        continue
                    
            for column in range(self.size):
                for row in range(self.size):
                    try:
                        if self.items[column][row] == player and self.items[column][row+1] == player and self.items[column][row+2] == player and self.items[column][row+3] == player:
                            vertical.append([(column,row),(column,row+1),(column,row+2),(column,row+3)])
                        else:
                            continue
                    except IndexError:
                        continue
                    
            for column in range(self.size):
                for row in range(self.size):
                    try:
                        if self.items[column][row] == player and self.items[column+1][row+1] == player and self.items[column+2][row+2] == player and self.items[column+3][row+3] == player:
                            diagonal_positive.append([(column,row),(column+1,row+1),(column+2,row+2),(column+3,row+3)])
                        else:
                            continue
                    except IndexError:
                        continue
            
            for column in range(self.size):
                for row in range(self.size):
                    try:    
                        if self.items[column][row] == player and self.items[column-1][row+1] == player and self.items[column-2][row+2] == player and self.items[column-3][row+3] == player and column - 1 >= 0 and column - 2 >= 0 and column - 3 >= 0:
                            diagonal_negative.append([(column,row),(column-1,row+1),(column-2,row+2),(column-3,row+3)])
                        else:
                            continue
                    except IndexError:
                        continue
            print("Horizontal: " + str(horizontal)[1:-1])
            print("vertical: " + str(vertical)[1:-1])
            print("diagonal_positive: " + str(diagonal_positive)[1:-1])
            print("diagonal_negative: " + str(diagonal_negative)[1:-1])
            return "---FINISH--- player " + str(player) 
        else:
            FourInARow.play(self)
        
        

class FourInARow:
    def __init__(self, size):
        self.board=GameBoard(size)
    def play(self):
        print("*****************NEW GAME*****************")
        self.board.display()
        player_number=0
        print()
        while not self.board.game_over():
            print("Player ",player_number+1,": ")
            if player_number==0:
                valid_input = False
                while not valid_input:
                    try:
                        column = int(input("Please input slot: "))      
                    except ValueError:
                        print("Input must be an integer in the range 0 to ", self.board.size)
                    else:
                        if column<0 or column>=self.board.size:
                            print("Input must be an integer in the range 0 to ", self.board.size)
                        else:
                            if self.board.add(column, player_number+1):
                                valid_input = True
                            else:
                                print("Column ", column, "is alrady full. Please choose another one.")
            else:
                # Choose move which maximises new points for computer player
                (best_column, max_points)=self.board.column_resulting_in_max_points(2)
                if max_points>0:
                    column=best_column
                else:
                    # if no move adds new points choose move which minimises points opponent player gets
                    (best_column, max_points)=self.board.column_resulting_in_max_points(1)
                    if max_points>0:
                        column=best_column
                    else:
                        # if no opponent move creates new points then choose column as close to middle as possible
                        column = self.board.free_slots_as_close_to_middle_as_possible()[0]
                self.board.add(column, player_number+1)
                print("The AI chooses column ", column)
                
            self.board.display()  
            player_number=(player_number+1)%2
        if (self.board.points[0]>self.board.points[1]):
            print("Player 1 (circles) wins!")
            print()
            print("player1: (column,row)")
            print(self.board.summary(1))
            print()
            print("player2: (column,row)")
            print(self.board.summary(2))
            
        elif (self.board.points[0]<self.board.points[1]):    
            print("Player 2 (crosses) wins!")
            print()
            print("player1: (column,row)")
            print(self.board.summary(1))
            print()
            print("player2: (column,row)")
            print(self.board.summary(2))
            
        else:  
            print("It's a draw!")
            print()
            print("player1: (column,row)")
            print(self.board.summary(1))
            print()
            print("player2: (column,row)")
            print(self.board.summary(2))
        
game = FourInARow(6)
game.play()        
